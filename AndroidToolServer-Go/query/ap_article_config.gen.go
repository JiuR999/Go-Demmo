// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"AndroidToolServer-Go/model"
)

func newApArticleConfig(db *gorm.DB, opts ...gen.DOOption) apArticleConfig {
	_apArticleConfig := apArticleConfig{}

	_apArticleConfig.apArticleConfigDo.UseDB(db, opts...)
	_apArticleConfig.apArticleConfigDo.UseModel(&model.ApArticleConfig{})

	tableName := _apArticleConfig.apArticleConfigDo.TableName()
	_apArticleConfig.ALL = field.NewAsterisk(tableName)
	_apArticleConfig.ID = field.NewInt64(tableName, "id")
	_apArticleConfig.ArticleID = field.NewInt64(tableName, "article_id")
	_apArticleConfig.IsComment = field.NewInt32(tableName, "is_comment")
	_apArticleConfig.IsForward = field.NewInt32(tableName, "is_forward")
	_apArticleConfig.IsDown = field.NewInt32(tableName, "is_down")
	_apArticleConfig.IsDelete = field.NewInt32(tableName, "is_delete")

	_apArticleConfig.fillFieldMap()

	return _apArticleConfig
}

// apArticleConfig APP已发布文章配置表
type apArticleConfig struct {
	apArticleConfigDo

	ALL       field.Asterisk
	ID        field.Int64 // 主键
	ArticleID field.Int64 // 文章ID
	IsComment field.Int32 // 是否可评论
	IsForward field.Int32 // 是否转发
	IsDown    field.Int32 // 是否下架
	IsDelete  field.Int32 // 是否已删除

	fieldMap map[string]field.Expr
}

func (a apArticleConfig) Table(newTableName string) *apArticleConfig {
	a.apArticleConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apArticleConfig) As(alias string) *apArticleConfig {
	a.apArticleConfigDo.DO = *(a.apArticleConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apArticleConfig) updateTableName(table string) *apArticleConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.IsComment = field.NewInt32(table, "is_comment")
	a.IsForward = field.NewInt32(table, "is_forward")
	a.IsDown = field.NewInt32(table, "is_down")
	a.IsDelete = field.NewInt32(table, "is_delete")

	a.fillFieldMap()

	return a
}

func (a *apArticleConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apArticleConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["is_comment"] = a.IsComment
	a.fieldMap["is_forward"] = a.IsForward
	a.fieldMap["is_down"] = a.IsDown
	a.fieldMap["is_delete"] = a.IsDelete
}

func (a apArticleConfig) clone(db *gorm.DB) apArticleConfig {
	a.apArticleConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a apArticleConfig) replaceDB(db *gorm.DB) apArticleConfig {
	a.apArticleConfigDo.ReplaceDB(db)
	return a
}

type apArticleConfigDo struct{ gen.DO }

func (a apArticleConfigDo) Debug() *apArticleConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a apArticleConfigDo) WithContext(ctx context.Context) *apArticleConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apArticleConfigDo) ReadDB() *apArticleConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a apArticleConfigDo) WriteDB() *apArticleConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a apArticleConfigDo) Session(config *gorm.Session) *apArticleConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a apArticleConfigDo) Clauses(conds ...clause.Expression) *apArticleConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apArticleConfigDo) Returning(value interface{}, columns ...string) *apArticleConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apArticleConfigDo) Not(conds ...gen.Condition) *apArticleConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apArticleConfigDo) Or(conds ...gen.Condition) *apArticleConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apArticleConfigDo) Select(conds ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apArticleConfigDo) Where(conds ...gen.Condition) *apArticleConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apArticleConfigDo) Order(conds ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apArticleConfigDo) Distinct(cols ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apArticleConfigDo) Omit(cols ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apArticleConfigDo) Join(table schema.Tabler, on ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apArticleConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apArticleConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apArticleConfigDo) Group(cols ...field.Expr) *apArticleConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apArticleConfigDo) Having(conds ...gen.Condition) *apArticleConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apArticleConfigDo) Limit(limit int) *apArticleConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apArticleConfigDo) Offset(offset int) *apArticleConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apArticleConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *apArticleConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apArticleConfigDo) Unscoped() *apArticleConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apArticleConfigDo) Create(values ...*model.ApArticleConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apArticleConfigDo) CreateInBatches(values []*model.ApArticleConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apArticleConfigDo) Save(values ...*model.ApArticleConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apArticleConfigDo) First() (*model.ApArticleConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApArticleConfig), nil
	}
}

func (a apArticleConfigDo) Take() (*model.ApArticleConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApArticleConfig), nil
	}
}

func (a apArticleConfigDo) Last() (*model.ApArticleConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApArticleConfig), nil
	}
}

func (a apArticleConfigDo) Find() ([]*model.ApArticleConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApArticleConfig), err
}

func (a apArticleConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApArticleConfig, err error) {
	buf := make([]*model.ApArticleConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apArticleConfigDo) FindInBatches(result *[]*model.ApArticleConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apArticleConfigDo) Attrs(attrs ...field.AssignExpr) *apArticleConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apArticleConfigDo) Assign(attrs ...field.AssignExpr) *apArticleConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apArticleConfigDo) Joins(fields ...field.RelationField) *apArticleConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apArticleConfigDo) Preload(fields ...field.RelationField) *apArticleConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apArticleConfigDo) FirstOrInit() (*model.ApArticleConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApArticleConfig), nil
	}
}

func (a apArticleConfigDo) FirstOrCreate() (*model.ApArticleConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApArticleConfig), nil
	}
}

func (a apArticleConfigDo) FindByPage(offset int, limit int) (result []*model.ApArticleConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apArticleConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apArticleConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apArticleConfigDo) Delete(models ...*model.ApArticleConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apArticleConfigDo) withDO(do gen.Dao) *apArticleConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
