// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"AndroidToolServer-Go/model"
)

func newHardWare(db *gorm.DB, opts ...gen.DOOption) hardWare {
	_hardWare := hardWare{}

	_hardWare.hardWareDo.UseDB(db, opts...)
	_hardWare.hardWareDo.UseModel(&model.HardWare{})

	tableName := _hardWare.hardWareDo.TableName()
	_hardWare.ALL = field.NewAsterisk(tableName)
	_hardWare.ID = field.NewInt32(tableName, "id")
	_hardWare.Name = field.NewString(tableName, "name")
	_hardWare.Code = field.NewString(tableName, "code")
	_hardWare.CreateTime = field.NewTime(tableName, "create_time")
	_hardWare.UpdateTime = field.NewTime(tableName, "update_time")
	_hardWare.MonitorStatus = field.NewInt32(tableName, "monitor_status")
	_hardWare.Location = field.NewString(tableName, "location")
	_hardWare.HardWareType = field.NewString(tableName, "hard_ware_type")
	_hardWare.U = field.NewInt32(tableName, "u")
	_hardWare.UserID = field.NewString(tableName, "user_id")
	_hardWare.UserName = field.NewString(tableName, "user_name")
	_hardWare.UnitDepartID = field.NewString(tableName, "unit_depart_id")
	_hardWare.UnitDepartName = field.NewString(tableName, "unit_depart_name")
	_hardWare.UnitGroupID = field.NewString(tableName, "unit_group_id")
	_hardWare.UnitGroupName = field.NewString(tableName, "unit_group_name")

	_hardWare.fillFieldMap()

	return _hardWare
}

type hardWare struct {
	hardWareDo

	ALL            field.Asterisk
	ID             field.Int32
	Name           field.String
	Code           field.String
	CreateTime     field.Time
	UpdateTime     field.Time
	MonitorStatus  field.Int32
	Location       field.String
	HardWareType   field.String
	U              field.Int32
	UserID         field.String
	UserName       field.String
	UnitDepartID   field.String
	UnitDepartName field.String
	UnitGroupID    field.String
	UnitGroupName  field.String

	fieldMap map[string]field.Expr
}

func (h hardWare) Table(newTableName string) *hardWare {
	h.hardWareDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hardWare) As(alias string) *hardWare {
	h.hardWareDo.DO = *(h.hardWareDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hardWare) updateTableName(table string) *hardWare {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.Name = field.NewString(table, "name")
	h.Code = field.NewString(table, "code")
	h.CreateTime = field.NewTime(table, "create_time")
	h.UpdateTime = field.NewTime(table, "update_time")
	h.MonitorStatus = field.NewInt32(table, "monitor_status")
	h.Location = field.NewString(table, "location")
	h.HardWareType = field.NewString(table, "hard_ware_type")
	h.U = field.NewInt32(table, "u")
	h.UserID = field.NewString(table, "user_id")
	h.UserName = field.NewString(table, "user_name")
	h.UnitDepartID = field.NewString(table, "unit_depart_id")
	h.UnitDepartName = field.NewString(table, "unit_depart_name")
	h.UnitGroupID = field.NewString(table, "unit_group_id")
	h.UnitGroupName = field.NewString(table, "unit_group_name")

	h.fillFieldMap()

	return h
}

func (h *hardWare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hardWare) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 15)
	h.fieldMap["id"] = h.ID
	h.fieldMap["name"] = h.Name
	h.fieldMap["code"] = h.Code
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["update_time"] = h.UpdateTime
	h.fieldMap["monitor_status"] = h.MonitorStatus
	h.fieldMap["location"] = h.Location
	h.fieldMap["hard_ware_type"] = h.HardWareType
	h.fieldMap["u"] = h.U
	h.fieldMap["user_id"] = h.UserID
	h.fieldMap["user_name"] = h.UserName
	h.fieldMap["unit_depart_id"] = h.UnitDepartID
	h.fieldMap["unit_depart_name"] = h.UnitDepartName
	h.fieldMap["unit_group_id"] = h.UnitGroupID
	h.fieldMap["unit_group_name"] = h.UnitGroupName
}

func (h hardWare) clone(db *gorm.DB) hardWare {
	h.hardWareDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hardWare) replaceDB(db *gorm.DB) hardWare {
	h.hardWareDo.ReplaceDB(db)
	return h
}

type hardWareDo struct{ gen.DO }

func (h hardWareDo) Debug() *hardWareDo {
	return h.withDO(h.DO.Debug())
}

func (h hardWareDo) WithContext(ctx context.Context) *hardWareDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hardWareDo) ReadDB() *hardWareDo {
	return h.Clauses(dbresolver.Read)
}

func (h hardWareDo) WriteDB() *hardWareDo {
	return h.Clauses(dbresolver.Write)
}

func (h hardWareDo) Session(config *gorm.Session) *hardWareDo {
	return h.withDO(h.DO.Session(config))
}

func (h hardWareDo) Clauses(conds ...clause.Expression) *hardWareDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hardWareDo) Returning(value interface{}, columns ...string) *hardWareDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hardWareDo) Not(conds ...gen.Condition) *hardWareDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hardWareDo) Or(conds ...gen.Condition) *hardWareDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hardWareDo) Select(conds ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hardWareDo) Where(conds ...gen.Condition) *hardWareDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hardWareDo) Order(conds ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hardWareDo) Distinct(cols ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hardWareDo) Omit(cols ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hardWareDo) Join(table schema.Tabler, on ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hardWareDo) LeftJoin(table schema.Tabler, on ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hardWareDo) RightJoin(table schema.Tabler, on ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hardWareDo) Group(cols ...field.Expr) *hardWareDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hardWareDo) Having(conds ...gen.Condition) *hardWareDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hardWareDo) Limit(limit int) *hardWareDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hardWareDo) Offset(offset int) *hardWareDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hardWareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *hardWareDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hardWareDo) Unscoped() *hardWareDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hardWareDo) Create(values ...*model.HardWare) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hardWareDo) CreateInBatches(values []*model.HardWare, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hardWareDo) Save(values ...*model.HardWare) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hardWareDo) First() (*model.HardWare, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HardWare), nil
	}
}

func (h hardWareDo) Take() (*model.HardWare, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HardWare), nil
	}
}

func (h hardWareDo) Last() (*model.HardWare, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HardWare), nil
	}
}

func (h hardWareDo) Find() ([]*model.HardWare, error) {
	result, err := h.DO.Find()
	return result.([]*model.HardWare), err
}

func (h hardWareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HardWare, err error) {
	buf := make([]*model.HardWare, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hardWareDo) FindInBatches(result *[]*model.HardWare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hardWareDo) Attrs(attrs ...field.AssignExpr) *hardWareDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hardWareDo) Assign(attrs ...field.AssignExpr) *hardWareDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hardWareDo) Joins(fields ...field.RelationField) *hardWareDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hardWareDo) Preload(fields ...field.RelationField) *hardWareDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hardWareDo) FirstOrInit() (*model.HardWare, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HardWare), nil
	}
}

func (h hardWareDo) FirstOrCreate() (*model.HardWare, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HardWare), nil
	}
}

func (h hardWareDo) FindByPage(offset int, limit int) (result []*model.HardWare, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hardWareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hardWareDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hardWareDo) Delete(models ...*model.HardWare) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hardWareDo) withDO(do gen.Dao) *hardWareDo {
	h.DO = *do.(*gen.DO)
	return h
}
