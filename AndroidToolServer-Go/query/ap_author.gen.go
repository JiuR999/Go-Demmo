// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"AndroidToolServer-Go/model"
)

func newApAuthor(db *gorm.DB, opts ...gen.DOOption) apAuthor {
	_apAuthor := apAuthor{}

	_apAuthor.apAuthorDo.UseDB(db, opts...)
	_apAuthor.apAuthorDo.UseModel(&model.ApAuthor{})

	tableName := _apAuthor.apAuthorDo.TableName()
	_apAuthor.ALL = field.NewAsterisk(tableName)
	_apAuthor.ID = field.NewInt32(tableName, "id")
	_apAuthor.Name = field.NewString(tableName, "name")
	_apAuthor.Type = field.NewInt32(tableName, "type")
	_apAuthor.UserID = field.NewInt32(tableName, "user_id")
	_apAuthor.CreatedTime = field.NewTime(tableName, "created_time")
	_apAuthor.WmUserID = field.NewInt32(tableName, "wm_user_id")

	_apAuthor.fillFieldMap()

	return _apAuthor
}

// apAuthor APP文章作者信息表
type apAuthor struct {
	apAuthorDo

	ALL  field.Asterisk
	ID   field.Int32  // 主键
	Name field.String // 作者名称
	/*
		0 爬取数据
		            1 签约合作商
		            2 平台自媒体人

	*/
	Type        field.Int32
	UserID      field.Int32 // 社交账号ID
	CreatedTime field.Time  // 创建时间
	WmUserID    field.Int32 // 自媒体账号

	fieldMap map[string]field.Expr
}

func (a apAuthor) Table(newTableName string) *apAuthor {
	a.apAuthorDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apAuthor) As(alias string) *apAuthor {
	a.apAuthorDo.DO = *(a.apAuthorDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apAuthor) updateTableName(table string) *apAuthor {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Name = field.NewString(table, "name")
	a.Type = field.NewInt32(table, "type")
	a.UserID = field.NewInt32(table, "user_id")
	a.CreatedTime = field.NewTime(table, "created_time")
	a.WmUserID = field.NewInt32(table, "wm_user_id")

	a.fillFieldMap()

	return a
}

func (a *apAuthor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apAuthor) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["type"] = a.Type
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["created_time"] = a.CreatedTime
	a.fieldMap["wm_user_id"] = a.WmUserID
}

func (a apAuthor) clone(db *gorm.DB) apAuthor {
	a.apAuthorDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a apAuthor) replaceDB(db *gorm.DB) apAuthor {
	a.apAuthorDo.ReplaceDB(db)
	return a
}

type apAuthorDo struct{ gen.DO }

func (a apAuthorDo) Debug() *apAuthorDo {
	return a.withDO(a.DO.Debug())
}

func (a apAuthorDo) WithContext(ctx context.Context) *apAuthorDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apAuthorDo) ReadDB() *apAuthorDo {
	return a.Clauses(dbresolver.Read)
}

func (a apAuthorDo) WriteDB() *apAuthorDo {
	return a.Clauses(dbresolver.Write)
}

func (a apAuthorDo) Session(config *gorm.Session) *apAuthorDo {
	return a.withDO(a.DO.Session(config))
}

func (a apAuthorDo) Clauses(conds ...clause.Expression) *apAuthorDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apAuthorDo) Returning(value interface{}, columns ...string) *apAuthorDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apAuthorDo) Not(conds ...gen.Condition) *apAuthorDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apAuthorDo) Or(conds ...gen.Condition) *apAuthorDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apAuthorDo) Select(conds ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apAuthorDo) Where(conds ...gen.Condition) *apAuthorDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apAuthorDo) Order(conds ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apAuthorDo) Distinct(cols ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apAuthorDo) Omit(cols ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apAuthorDo) Join(table schema.Tabler, on ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apAuthorDo) LeftJoin(table schema.Tabler, on ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apAuthorDo) RightJoin(table schema.Tabler, on ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apAuthorDo) Group(cols ...field.Expr) *apAuthorDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apAuthorDo) Having(conds ...gen.Condition) *apAuthorDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apAuthorDo) Limit(limit int) *apAuthorDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apAuthorDo) Offset(offset int) *apAuthorDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apAuthorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *apAuthorDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apAuthorDo) Unscoped() *apAuthorDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apAuthorDo) Create(values ...*model.ApAuthor) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apAuthorDo) CreateInBatches(values []*model.ApAuthor, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apAuthorDo) Save(values ...*model.ApAuthor) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apAuthorDo) First() (*model.ApAuthor, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApAuthor), nil
	}
}

func (a apAuthorDo) Take() (*model.ApAuthor, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApAuthor), nil
	}
}

func (a apAuthorDo) Last() (*model.ApAuthor, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApAuthor), nil
	}
}

func (a apAuthorDo) Find() ([]*model.ApAuthor, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApAuthor), err
}

func (a apAuthorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApAuthor, err error) {
	buf := make([]*model.ApAuthor, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apAuthorDo) FindInBatches(result *[]*model.ApAuthor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apAuthorDo) Attrs(attrs ...field.AssignExpr) *apAuthorDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apAuthorDo) Assign(attrs ...field.AssignExpr) *apAuthorDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apAuthorDo) Joins(fields ...field.RelationField) *apAuthorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apAuthorDo) Preload(fields ...field.RelationField) *apAuthorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apAuthorDo) FirstOrInit() (*model.ApAuthor, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApAuthor), nil
	}
}

func (a apAuthorDo) FirstOrCreate() (*model.ApAuthor, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApAuthor), nil
	}
}

func (a apAuthorDo) FindByPage(offset int, limit int) (result []*model.ApAuthor, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apAuthorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apAuthorDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apAuthorDo) Delete(models ...*model.ApAuthor) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apAuthorDo) withDO(do gen.Dao) *apAuthorDo {
	a.DO = *do.(*gen.DO)
	return a
}
