// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"AndroidToolServer-Go/model"
)

func newApCollection(db *gorm.DB, opts ...gen.DOOption) apCollection {
	_apCollection := apCollection{}

	_apCollection.apCollectionDo.UseDB(db, opts...)
	_apCollection.apCollectionDo.UseModel(&model.ApCollection{})

	tableName := _apCollection.apCollectionDo.TableName()
	_apCollection.ALL = field.NewAsterisk(tableName)
	_apCollection.ID = field.NewInt64(tableName, "id")
	_apCollection.EntryID = field.NewInt32(tableName, "entry_id")
	_apCollection.ArticleID = field.NewInt64(tableName, "article_id")
	_apCollection.Type = field.NewInt32(tableName, "type")
	_apCollection.CollectionTime = field.NewTime(tableName, "collection_time")
	_apCollection.PublishedTime = field.NewTime(tableName, "published_time")

	_apCollection.fillFieldMap()

	return _apCollection
}

// apCollection APP收藏信息表
type apCollection struct {
	apCollectionDo

	ALL       field.Asterisk
	ID        field.Int64
	EntryID   field.Int32 // 实体ID
	ArticleID field.Int64 // 文章ID
	/*
		点赞内容类型
		            0文章
		            1动态
	*/
	Type           field.Int32
	CollectionTime field.Time // 创建时间
	PublishedTime  field.Time // 发布时间

	fieldMap map[string]field.Expr
}

func (a apCollection) Table(newTableName string) *apCollection {
	a.apCollectionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a apCollection) As(alias string) *apCollection {
	a.apCollectionDo.DO = *(a.apCollectionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *apCollection) updateTableName(table string) *apCollection {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.EntryID = field.NewInt32(table, "entry_id")
	a.ArticleID = field.NewInt64(table, "article_id")
	a.Type = field.NewInt32(table, "type")
	a.CollectionTime = field.NewTime(table, "collection_time")
	a.PublishedTime = field.NewTime(table, "published_time")

	a.fillFieldMap()

	return a
}

func (a *apCollection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *apCollection) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["entry_id"] = a.EntryID
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["type"] = a.Type
	a.fieldMap["collection_time"] = a.CollectionTime
	a.fieldMap["published_time"] = a.PublishedTime
}

func (a apCollection) clone(db *gorm.DB) apCollection {
	a.apCollectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a apCollection) replaceDB(db *gorm.DB) apCollection {
	a.apCollectionDo.ReplaceDB(db)
	return a
}

type apCollectionDo struct{ gen.DO }

func (a apCollectionDo) Debug() *apCollectionDo {
	return a.withDO(a.DO.Debug())
}

func (a apCollectionDo) WithContext(ctx context.Context) *apCollectionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a apCollectionDo) ReadDB() *apCollectionDo {
	return a.Clauses(dbresolver.Read)
}

func (a apCollectionDo) WriteDB() *apCollectionDo {
	return a.Clauses(dbresolver.Write)
}

func (a apCollectionDo) Session(config *gorm.Session) *apCollectionDo {
	return a.withDO(a.DO.Session(config))
}

func (a apCollectionDo) Clauses(conds ...clause.Expression) *apCollectionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a apCollectionDo) Returning(value interface{}, columns ...string) *apCollectionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a apCollectionDo) Not(conds ...gen.Condition) *apCollectionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a apCollectionDo) Or(conds ...gen.Condition) *apCollectionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a apCollectionDo) Select(conds ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a apCollectionDo) Where(conds ...gen.Condition) *apCollectionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a apCollectionDo) Order(conds ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a apCollectionDo) Distinct(cols ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a apCollectionDo) Omit(cols ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a apCollectionDo) Join(table schema.Tabler, on ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a apCollectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a apCollectionDo) RightJoin(table schema.Tabler, on ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a apCollectionDo) Group(cols ...field.Expr) *apCollectionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a apCollectionDo) Having(conds ...gen.Condition) *apCollectionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a apCollectionDo) Limit(limit int) *apCollectionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a apCollectionDo) Offset(offset int) *apCollectionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a apCollectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *apCollectionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a apCollectionDo) Unscoped() *apCollectionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a apCollectionDo) Create(values ...*model.ApCollection) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a apCollectionDo) CreateInBatches(values []*model.ApCollection, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a apCollectionDo) Save(values ...*model.ApCollection) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a apCollectionDo) First() (*model.ApCollection, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApCollection), nil
	}
}

func (a apCollectionDo) Take() (*model.ApCollection, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApCollection), nil
	}
}

func (a apCollectionDo) Last() (*model.ApCollection, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApCollection), nil
	}
}

func (a apCollectionDo) Find() ([]*model.ApCollection, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApCollection), err
}

func (a apCollectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApCollection, err error) {
	buf := make([]*model.ApCollection, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a apCollectionDo) FindInBatches(result *[]*model.ApCollection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a apCollectionDo) Attrs(attrs ...field.AssignExpr) *apCollectionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a apCollectionDo) Assign(attrs ...field.AssignExpr) *apCollectionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a apCollectionDo) Joins(fields ...field.RelationField) *apCollectionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a apCollectionDo) Preload(fields ...field.RelationField) *apCollectionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a apCollectionDo) FirstOrInit() (*model.ApCollection, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApCollection), nil
	}
}

func (a apCollectionDo) FirstOrCreate() (*model.ApCollection, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApCollection), nil
	}
}

func (a apCollectionDo) FindByPage(offset int, limit int) (result []*model.ApCollection, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a apCollectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a apCollectionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a apCollectionDo) Delete(models ...*model.ApCollection) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *apCollectionDo) withDO(do gen.Dao) *apCollectionDo {
	a.DO = *do.(*gen.DO)
	return a
}
