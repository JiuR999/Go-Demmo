// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"AndroidToolServer-Go/model"
)

func newDgsGeneralFailure(db *gorm.DB, opts ...gen.DOOption) dgsGeneralFailure {
	_dgsGeneralFailure := dgsGeneralFailure{}

	_dgsGeneralFailure.dgsGeneralFailureDo.UseDB(db, opts...)
	_dgsGeneralFailure.dgsGeneralFailureDo.UseModel(&model.DgsGeneralFailure{})

	tableName := _dgsGeneralFailure.dgsGeneralFailureDo.TableName()
	_dgsGeneralFailure.ALL = field.NewAsterisk(tableName)
	_dgsGeneralFailure.ID = field.NewInt32(tableName, "id")
	_dgsGeneralFailure.AlarmTitle = field.NewString(tableName, "alarm_title")
	_dgsGeneralFailure.AlarmHandle = field.NewString(tableName, "alarm_handle")
	_dgsGeneralFailure.AlarmKeyword = field.NewString(tableName, "alarm_keyword")
	_dgsGeneralFailure.AlarmType = field.NewString(tableName, "alarm_type")
	_dgsGeneralFailure.AlarmCreaterID = field.NewInt32(tableName, "alarm_creater_id")
	_dgsGeneralFailure.CreateTime = field.NewTime(tableName, "create_time")
	_dgsGeneralFailure.UpdateTime = field.NewTime(tableName, "update_time")
	_dgsGeneralFailure.AlarmSystemInfluence = field.NewString(tableName, "alarm_system_influence")
	_dgsGeneralFailure.AlarmDetail = field.NewString(tableName, "alarm_detail")
	_dgsGeneralFailure.AlarmPossibleReasons = field.NewString(tableName, "alarm_possible_reasons")

	_dgsGeneralFailure.fillFieldMap()

	return _dgsGeneralFailure
}

type dgsGeneralFailure struct {
	dgsGeneralFailureDo

	ALL                  field.Asterisk
	ID                   field.Int32
	AlarmTitle           field.String // 告警标题
	AlarmHandle          field.String // 告警解决方案
	AlarmKeyword         field.String // 告警关键字
	AlarmType            field.String // 告警类型
	AlarmCreaterID       field.Int32  // 创建人ID
	CreateTime           field.Time   // 创建时间
	UpdateTime           field.Time   // 更新时间
	AlarmSystemInfluence field.String // 对系统的影响
	AlarmDetail          field.String // 告警详情
	AlarmPossibleReasons field.String // 告警可能原因

	fieldMap map[string]field.Expr
}

func (d dgsGeneralFailure) Table(newTableName string) *dgsGeneralFailure {
	d.dgsGeneralFailureDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dgsGeneralFailure) As(alias string) *dgsGeneralFailure {
	d.dgsGeneralFailureDo.DO = *(d.dgsGeneralFailureDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dgsGeneralFailure) updateTableName(table string) *dgsGeneralFailure {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.AlarmTitle = field.NewString(table, "alarm_title")
	d.AlarmHandle = field.NewString(table, "alarm_handle")
	d.AlarmKeyword = field.NewString(table, "alarm_keyword")
	d.AlarmType = field.NewString(table, "alarm_type")
	d.AlarmCreaterID = field.NewInt32(table, "alarm_creater_id")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")
	d.AlarmSystemInfluence = field.NewString(table, "alarm_system_influence")
	d.AlarmDetail = field.NewString(table, "alarm_detail")
	d.AlarmPossibleReasons = field.NewString(table, "alarm_possible_reasons")

	d.fillFieldMap()

	return d
}

func (d *dgsGeneralFailure) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dgsGeneralFailure) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 11)
	d.fieldMap["id"] = d.ID
	d.fieldMap["alarm_title"] = d.AlarmTitle
	d.fieldMap["alarm_handle"] = d.AlarmHandle
	d.fieldMap["alarm_keyword"] = d.AlarmKeyword
	d.fieldMap["alarm_type"] = d.AlarmType
	d.fieldMap["alarm_creater_id"] = d.AlarmCreaterID
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["alarm_system_influence"] = d.AlarmSystemInfluence
	d.fieldMap["alarm_detail"] = d.AlarmDetail
	d.fieldMap["alarm_possible_reasons"] = d.AlarmPossibleReasons
}

func (d dgsGeneralFailure) clone(db *gorm.DB) dgsGeneralFailure {
	d.dgsGeneralFailureDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dgsGeneralFailure) replaceDB(db *gorm.DB) dgsGeneralFailure {
	d.dgsGeneralFailureDo.ReplaceDB(db)
	return d
}

type dgsGeneralFailureDo struct{ gen.DO }

func (d dgsGeneralFailureDo) Debug() *dgsGeneralFailureDo {
	return d.withDO(d.DO.Debug())
}

func (d dgsGeneralFailureDo) WithContext(ctx context.Context) *dgsGeneralFailureDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dgsGeneralFailureDo) ReadDB() *dgsGeneralFailureDo {
	return d.Clauses(dbresolver.Read)
}

func (d dgsGeneralFailureDo) WriteDB() *dgsGeneralFailureDo {
	return d.Clauses(dbresolver.Write)
}

func (d dgsGeneralFailureDo) Session(config *gorm.Session) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Session(config))
}

func (d dgsGeneralFailureDo) Clauses(conds ...clause.Expression) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dgsGeneralFailureDo) Returning(value interface{}, columns ...string) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dgsGeneralFailureDo) Not(conds ...gen.Condition) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dgsGeneralFailureDo) Or(conds ...gen.Condition) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dgsGeneralFailureDo) Select(conds ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dgsGeneralFailureDo) Where(conds ...gen.Condition) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dgsGeneralFailureDo) Order(conds ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dgsGeneralFailureDo) Distinct(cols ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dgsGeneralFailureDo) Omit(cols ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dgsGeneralFailureDo) Join(table schema.Tabler, on ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dgsGeneralFailureDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dgsGeneralFailureDo) RightJoin(table schema.Tabler, on ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dgsGeneralFailureDo) Group(cols ...field.Expr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dgsGeneralFailureDo) Having(conds ...gen.Condition) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dgsGeneralFailureDo) Limit(limit int) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dgsGeneralFailureDo) Offset(offset int) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dgsGeneralFailureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dgsGeneralFailureDo) Unscoped() *dgsGeneralFailureDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dgsGeneralFailureDo) Create(values ...*model.DgsGeneralFailure) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dgsGeneralFailureDo) CreateInBatches(values []*model.DgsGeneralFailure, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dgsGeneralFailureDo) Save(values ...*model.DgsGeneralFailure) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dgsGeneralFailureDo) First() (*model.DgsGeneralFailure, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DgsGeneralFailure), nil
	}
}

func (d dgsGeneralFailureDo) Take() (*model.DgsGeneralFailure, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DgsGeneralFailure), nil
	}
}

func (d dgsGeneralFailureDo) Last() (*model.DgsGeneralFailure, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DgsGeneralFailure), nil
	}
}

func (d dgsGeneralFailureDo) Find() ([]*model.DgsGeneralFailure, error) {
	result, err := d.DO.Find()
	return result.([]*model.DgsGeneralFailure), err
}

func (d dgsGeneralFailureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DgsGeneralFailure, err error) {
	buf := make([]*model.DgsGeneralFailure, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dgsGeneralFailureDo) FindInBatches(result *[]*model.DgsGeneralFailure, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dgsGeneralFailureDo) Attrs(attrs ...field.AssignExpr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dgsGeneralFailureDo) Assign(attrs ...field.AssignExpr) *dgsGeneralFailureDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dgsGeneralFailureDo) Joins(fields ...field.RelationField) *dgsGeneralFailureDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dgsGeneralFailureDo) Preload(fields ...field.RelationField) *dgsGeneralFailureDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dgsGeneralFailureDo) FirstOrInit() (*model.DgsGeneralFailure, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DgsGeneralFailure), nil
	}
}

func (d dgsGeneralFailureDo) FirstOrCreate() (*model.DgsGeneralFailure, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DgsGeneralFailure), nil
	}
}

func (d dgsGeneralFailureDo) FindByPage(offset int, limit int) (result []*model.DgsGeneralFailure, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dgsGeneralFailureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dgsGeneralFailureDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dgsGeneralFailureDo) Delete(models ...*model.DgsGeneralFailure) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dgsGeneralFailureDo) withDO(do gen.Dao) *dgsGeneralFailureDo {
	d.DO = *do.(*gen.DO)
	return d
}
