// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"AndroidToolServer-Go/model"
)

func newZbDream(db *gorm.DB, opts ...gen.DOOption) zbDream {
	_zbDream := zbDream{}

	_zbDream.zbDreamDo.UseDB(db, opts...)
	_zbDream.zbDreamDo.UseModel(&model.ZbDream{})

	tableName := _zbDream.zbDreamDo.TableName()
	_zbDream.ALL = field.NewAsterisk(tableName)
	_zbDream.ID = field.NewInt32(tableName, "id")
	_zbDream.Title = field.NewString(tableName, "title")
	_zbDream.Message = field.NewString(tableName, "message")
	_zbDream.Biglx = field.NewString(tableName, "biglx")
	_zbDream.Smalllx = field.NewString(tableName, "smalllx")
	_zbDream.Zm = field.NewString(tableName, "zm")

	_zbDream.fillFieldMap()

	return _zbDream
}

// zbDream 周公解梦
type zbDream struct {
	zbDreamDo

	ALL     field.Asterisk
	ID      field.Int32
	Title   field.String
	Message field.String
	Biglx   field.String
	Smalllx field.String
	Zm      field.String

	fieldMap map[string]field.Expr
}

func (z zbDream) Table(newTableName string) *zbDream {
	z.zbDreamDo.UseTable(newTableName)
	return z.updateTableName(newTableName)
}

func (z zbDream) As(alias string) *zbDream {
	z.zbDreamDo.DO = *(z.zbDreamDo.As(alias).(*gen.DO))
	return z.updateTableName(alias)
}

func (z *zbDream) updateTableName(table string) *zbDream {
	z.ALL = field.NewAsterisk(table)
	z.ID = field.NewInt32(table, "id")
	z.Title = field.NewString(table, "title")
	z.Message = field.NewString(table, "message")
	z.Biglx = field.NewString(table, "biglx")
	z.Smalllx = field.NewString(table, "smalllx")
	z.Zm = field.NewString(table, "zm")

	z.fillFieldMap()

	return z
}

func (z *zbDream) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := z.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (z *zbDream) fillFieldMap() {
	z.fieldMap = make(map[string]field.Expr, 6)
	z.fieldMap["id"] = z.ID
	z.fieldMap["title"] = z.Title
	z.fieldMap["message"] = z.Message
	z.fieldMap["biglx"] = z.Biglx
	z.fieldMap["smalllx"] = z.Smalllx
	z.fieldMap["zm"] = z.Zm
}

func (z zbDream) clone(db *gorm.DB) zbDream {
	z.zbDreamDo.ReplaceConnPool(db.Statement.ConnPool)
	return z
}

func (z zbDream) replaceDB(db *gorm.DB) zbDream {
	z.zbDreamDo.ReplaceDB(db)
	return z
}

type zbDreamDo struct{ gen.DO }

func (z zbDreamDo) Debug() *zbDreamDo {
	return z.withDO(z.DO.Debug())
}

func (z zbDreamDo) WithContext(ctx context.Context) *zbDreamDo {
	return z.withDO(z.DO.WithContext(ctx))
}

func (z zbDreamDo) ReadDB() *zbDreamDo {
	return z.Clauses(dbresolver.Read)
}

func (z zbDreamDo) WriteDB() *zbDreamDo {
	return z.Clauses(dbresolver.Write)
}

func (z zbDreamDo) Session(config *gorm.Session) *zbDreamDo {
	return z.withDO(z.DO.Session(config))
}

func (z zbDreamDo) Clauses(conds ...clause.Expression) *zbDreamDo {
	return z.withDO(z.DO.Clauses(conds...))
}

func (z zbDreamDo) Returning(value interface{}, columns ...string) *zbDreamDo {
	return z.withDO(z.DO.Returning(value, columns...))
}

func (z zbDreamDo) Not(conds ...gen.Condition) *zbDreamDo {
	return z.withDO(z.DO.Not(conds...))
}

func (z zbDreamDo) Or(conds ...gen.Condition) *zbDreamDo {
	return z.withDO(z.DO.Or(conds...))
}

func (z zbDreamDo) Select(conds ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.Select(conds...))
}

func (z zbDreamDo) Where(conds ...gen.Condition) *zbDreamDo {
	return z.withDO(z.DO.Where(conds...))
}

func (z zbDreamDo) Order(conds ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.Order(conds...))
}

func (z zbDreamDo) Distinct(cols ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.Distinct(cols...))
}

func (z zbDreamDo) Omit(cols ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.Omit(cols...))
}

func (z zbDreamDo) Join(table schema.Tabler, on ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.Join(table, on...))
}

func (z zbDreamDo) LeftJoin(table schema.Tabler, on ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.LeftJoin(table, on...))
}

func (z zbDreamDo) RightJoin(table schema.Tabler, on ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.RightJoin(table, on...))
}

func (z zbDreamDo) Group(cols ...field.Expr) *zbDreamDo {
	return z.withDO(z.DO.Group(cols...))
}

func (z zbDreamDo) Having(conds ...gen.Condition) *zbDreamDo {
	return z.withDO(z.DO.Having(conds...))
}

func (z zbDreamDo) Limit(limit int) *zbDreamDo {
	return z.withDO(z.DO.Limit(limit))
}

func (z zbDreamDo) Offset(offset int) *zbDreamDo {
	return z.withDO(z.DO.Offset(offset))
}

func (z zbDreamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *zbDreamDo {
	return z.withDO(z.DO.Scopes(funcs...))
}

func (z zbDreamDo) Unscoped() *zbDreamDo {
	return z.withDO(z.DO.Unscoped())
}

func (z zbDreamDo) Create(values ...*model.ZbDream) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Create(values)
}

func (z zbDreamDo) CreateInBatches(values []*model.ZbDream, batchSize int) error {
	return z.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (z zbDreamDo) Save(values ...*model.ZbDream) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Save(values)
}

func (z zbDreamDo) First() (*model.ZbDream, error) {
	if result, err := z.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZbDream), nil
	}
}

func (z zbDreamDo) Take() (*model.ZbDream, error) {
	if result, err := z.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZbDream), nil
	}
}

func (z zbDreamDo) Last() (*model.ZbDream, error) {
	if result, err := z.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZbDream), nil
	}
}

func (z zbDreamDo) Find() ([]*model.ZbDream, error) {
	result, err := z.DO.Find()
	return result.([]*model.ZbDream), err
}

func (z zbDreamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ZbDream, err error) {
	buf := make([]*model.ZbDream, 0, batchSize)
	err = z.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (z zbDreamDo) FindInBatches(result *[]*model.ZbDream, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return z.DO.FindInBatches(result, batchSize, fc)
}

func (z zbDreamDo) Attrs(attrs ...field.AssignExpr) *zbDreamDo {
	return z.withDO(z.DO.Attrs(attrs...))
}

func (z zbDreamDo) Assign(attrs ...field.AssignExpr) *zbDreamDo {
	return z.withDO(z.DO.Assign(attrs...))
}

func (z zbDreamDo) Joins(fields ...field.RelationField) *zbDreamDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Joins(_f))
	}
	return &z
}

func (z zbDreamDo) Preload(fields ...field.RelationField) *zbDreamDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Preload(_f))
	}
	return &z
}

func (z zbDreamDo) FirstOrInit() (*model.ZbDream, error) {
	if result, err := z.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZbDream), nil
	}
}

func (z zbDreamDo) FirstOrCreate() (*model.ZbDream, error) {
	if result, err := z.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ZbDream), nil
	}
}

func (z zbDreamDo) FindByPage(offset int, limit int) (result []*model.ZbDream, count int64, err error) {
	result, err = z.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = z.Offset(-1).Limit(-1).Count()
	return
}

func (z zbDreamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = z.Count()
	if err != nil {
		return
	}

	err = z.Offset(offset).Limit(limit).Scan(result)
	return
}

func (z zbDreamDo) Scan(result interface{}) (err error) {
	return z.DO.Scan(result)
}

func (z zbDreamDo) Delete(models ...*model.ZbDream) (result gen.ResultInfo, err error) {
	return z.DO.Delete(models)
}

func (z *zbDreamDo) withDO(do gen.Dao) *zbDreamDo {
	z.DO = *do.(*gen.DO)
	return z
}
